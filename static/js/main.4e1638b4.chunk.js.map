{"version":3,"sources":["card/card.module.scss","card/card.jsx","countrySelector/CountrySelector.jsx","apiCalls.js","feedOverview/feed/Feed.jsx","feedOverview/FeedOverview.jsx","homepage/Homepage.jsx","App.js","serviceWorker.js","index.js","countrySelector/countryPicker.module.scss","feedOverview/feed/feed.module.scss","feedOverview/feedOverview.module.scss","homepage/homepage.module.scss"],"names":["module","exports","Card","confirmed","recovered","deaths","lastUpdate","className","styles","cards","card","style","color","start","end","duration","separator","CountrySelector","handleChange","countries","group","onChange","e","target","value","map","name","key","fetchCountries","a","fetch","response","json","data","fetchTotalData","finalData","date","reportDate","total","handleSubmit","country","res","getTotalNumbers","fetchNews","method","headers","process","news","Feed","props","image","url","title","summarization","source","elabDate","feed","href","src","alt","FeedOverview","useState","setNews","getNews","useEffect","feedOverview","idx","time","Date","toString","split","splice","join","HomePage","nations","setNations","info","setInfo","totalInfo","setTotalInfo","totalNumber","setTotalNumbers","handleSingleCountryData","getCountries","getTotalData","getNumbers","homepage","navbar","logo","background","mobile","substring","renderData","chart","labels","datasets","label","backgroundColor","options","legend","display","borderColor","fill","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e1638b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"card_cards__Ak5nZ\",\"card\":\"card_card__9ekbi\"};","import React from \"react\";\n\nimport CountUp from \"react-countup\";\n\nimport styles from \"./card.module.scss\";\n\nconst Card = ({ confirmed, recovered, deaths, lastUpdate }) => {\n  return (\n    <div className={styles.cards}>\n      <div className={styles.card}>\n        <h2>Infected</h2>\n        <h3 style={{ color: \"#FF9D00\" }}>\n          <CountUp start={0} end={confirmed} duration={2} separator=\",\" />\n        </h3>\n        <p>{lastUpdate}</p>\n      </div>\n      <div className={styles.card}>\n        <h2>Recovered</h2>\n        <h3 style={{ color: \"#65da9a\" }}>\n          <CountUp start={0} end={recovered} duration={2} separator=\",\" />\n        </h3>\n        <p>{lastUpdate}</p>\n      </div>\n      <div className={styles.card}>\n        <h2>Deaths</h2>\n        <h3 style={{ color: \"#F65064\" }}>\n          <CountUp start={0} end={deaths} duration={2} separator=\",\" />\n        </h3>\n        <p>{lastUpdate}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport styles from \"./countryPicker.module.scss\";\n\nconst CountrySelector = ({ handleChange, countries }) => (\n  <div className={styles.group}>\n    <select onChange={(e) => handleChange(e.target.value)}>\n      <option value=\"\">Global state</option>\n      {countries.map(({ name }) => (\n        <option key={name} value={name}>\n          {name}\n        </option>\n      ))}\n    </select>\n  </div>\n);\n\nexport default CountrySelector;\n","export const fetchCountries = async () => {\n  const response = await fetch(\"https://covid19.mathdro.id/api/countries\");\n  const data = await response.json();\n  const { countries } = data;\n  return countries;\n};\n\nexport const fetchTotalData = async () => {\n  const response = await fetch(\"https://covid19.mathdro.id/api/daily\");\n  const data = await response.json();\n\n  const finalData = data.map(\n    ({ confirmed, deaths, recovered, reportDate: date }) => ({\n      confirmed: confirmed.total,\n      deaths: deaths.total,\n      recovered: recovered.total,\n      date,\n    })\n  );\n\n  return finalData;\n};\n\nexport const handleSubmit = async (country) => {\n  const res = await fetch(\n    `https://covid19.mathdro.id/api/countries/${country}`\n  );\n  const data = await res.json();\n  return data;\n};\n\nexport const getTotalNumbers = async () => {\n  const res = await fetch(\"https://covid19.mathdro.id/api\");\n  const data = await res.json();\n  return data;\n};\n\nexport const fetchNews = async () => {\n  const res = await fetch(\n    \"https://rapidapi.p.rapidapi.com/topic-research?limit=20&search=corona&from=2020-09-10&skip=1&langs=en\",\n    {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"news67.p.rapidapi.com\",\n        \"x-rapidapi-key\": `${process.env.REACT_APP_KEY}`,\n      },\n    }\n  );\n  const data = await res.json();\n  const { news } = data;\n  return news;\n};\n","import React from \"react\";\n\nimport styles from \"./feed.module.scss\";\n\nconst Feed = (props) => {\n  // const { urlToImage, url, title, description, author, time } = props;\n  // return (\n  //   <div className={styles.feed}>\n  //     <a href={url}>\n  //       <img src={urlToImage} alt=\"article\" />\n  //     </a>\n  //     <a href={url}>\n  //       <h2>{title}</h2>\n  //     </a>\n  //     <p>{description}</p>\n  //     <p>{author}</p>\n  //     <p>{time}</p>\n  //   </div>\n  // );\n  const { image, url, title, summarization, source, elabDate } = props;\n  return (\n    <div className={styles.feed}>\n      <a href={url}>\n        <img src={image} alt=\"article\" />\n      </a>\n      <a href={url}>\n        <h2>{title}</h2>\n      </a>\n      <p>{summarization}</p>\n      <p>{source}</p>\n      <p>{elabDate}</p>\n    </div>\n  );\n};\nexport default Feed;\n","import React, { useState, useEffect } from \"react\";\n\nimport Feed from \"./feed/Feed\";\n\nimport { fetchNews } from \"../apiCalls\";\n\nimport styles from \"./feedOverview.module.scss\";\n\nconst FeedOverview = () => {\n  const [news, setNews] = useState([]);\n\n  const getNews = async () => {\n    const data = await fetchNews();\n    setNews(data);\n  };\n\n  useEffect(() => {\n    getNews();\n  }, []);\n\n  return (\n    <div className={styles.feedOverview}>\n      {news\n        // .filter(\n        //   ({ urlToImage }) => urlToImage !== null && urlToImage !== \"unknown\"\n        // )\n        .map((props, idx) => {\n          const time = new Date(props.elabDate)\n            .toString()\n            .split(\" \")\n            .splice(1, 3)\n            .join(\" \");\n          return <Feed {...props} key={idx} time={time} />;\n        })}\n    </div>\n  );\n};\n\nexport default FeedOverview;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Line, Bar } from \"react-chartjs-2\";\nimport Card from \"../card/card\";\nimport CountrySelector from \"../countrySelector/CountrySelector\";\n\nimport {\n  fetchCountries,\n  fetchTotalData,\n  handleSubmit,\n  getTotalNumbers,\n} from \"../apiCalls\";\n\nimport FeedOverview from \"../feedOverview/FeedOverview\";\n\nimport styles from \"./homepage.module.scss\";\n\nconst HomePage = () => {\n  const [nations, setNations] = useState([]);\n  const [info, setInfo] = useState([]);\n  const [totalInfo, setTotalInfo] = useState([]);\n  const [totalNumber, setTotalNumbers] = useState({});\n\n  const handleSingleCountryData = async (country) => {\n    const data = await handleSubmit(country);\n    setInfo(data);\n  };\n\n  const getCountries = async () => {\n    const countries = await fetchCountries();\n    setNations(countries);\n  };\n\n  const getTotalData = async () => {\n    const data = await fetchTotalData();\n    setTotalInfo(data);\n  };\n\n  const getNumbers = async () => {\n    const data = await getTotalNumbers();\n    setTotalNumbers(data);\n  };\n\n  useEffect(() => {\n    getCountries();\n    getTotalData();\n    getNumbers();\n  }, []);\n\n  const { confirmed, recovered, deaths } = info;\n\n  const renderData = () => {\n    if (info && info.confirmed) {\n      const lastUpdate = new Date(info.lastUpdate.substring(0, 10))\n        .toString()\n        .split(\" \")\n        .splice(1, 3)\n        .join(\" \");\n      return (\n        <Card\n          confirmed={confirmed.value}\n          recovered={recovered.value}\n          deaths={deaths.value}\n          lastUpdate={lastUpdate}\n        />\n      );\n    } else {\n      return (\n        <Card\n          confirmed={totalNumber.confirmed ? totalNumber.confirmed.value : null}\n          recovered={totalNumber.recovered ? totalNumber.recovered.value : null}\n          deaths={totalNumber.deaths ? totalNumber.deaths.value : null}\n          lastUpdate={new Date().toString().split(\" \").splice(1, 3).join(\" \")}\n        />\n      );\n    }\n  };\n\n  const renderChart = () => {\n    if (info && info.deaths) {\n      return (\n        <Bar\n          data={{\n            labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n            datasets: [\n              {\n                label: \"People\",\n                backgroundColor: [\"#FF9D00\", \"#65da9a\", \"#F65064\"],\n                data: [confirmed.value, recovered.value, deaths.value],\n              },\n            ],\n          }}\n          options={{\n            legend: { display: false },\n          }}\n        />\n      );\n    } else {\n      return (\n        <Line\n          data={{\n            labels: totalInfo.map(({ date }) => date),\n            datasets: [\n              {\n                data: totalInfo.map((data) => data.confirmed),\n                label: \"Infected\",\n                borderColor: \"#FF9D00\",\n                fill: true,\n              },\n              {\n                data: totalInfo.map((data) => data.deaths),\n                label: \"Deaths\",\n                borderColor: \"red\",\n                backgroundColor: \"#F65064\",\n                fill: true,\n              },\n            ],\n          }}\n          height={190}\n        />\n      );\n    }\n  };\n\n  return (\n    <div className={styles.homepage}>\n      <nav className={styles.navbar}>\n        <a href=\"#\">\n          <div className={styles.logo}></div>\n        </a>\n      </nav>\n      <div className={styles.background}>\n        <CountrySelector\n          countries={nations}\n          handleChange={handleSingleCountryData}\n        />\n        <div className={styles.mobile}>\n          {renderData()}\n          <div className={styles.chart}>{renderChart()}</div>\n        </div>\n      </div>\n      <FeedOverview />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React, { useEffect } from \"react\";\nimport HomePage from \"../src/homepage/Homepage\";\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import \"materialize-css/dist/css/materialize.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"countryPicker_group__3kZdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed\":\"feed_feed__1pMle\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedOverview\":\"feedOverview_feedOverview__3xn8j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homepage\":\"homepage_homepage__3Pf6j\",\"navbar\":\"homepage_navbar__3TkpL\",\"logo\":\"homepage_logo__2mhVh\",\"background\":\"homepage_background__qY8Re\",\"chart\":\"homepage_chart__vv4zS\",\"mobile\":\"homepage_mobile__2ZZDK\"};"],"sourceRoot":""}